var isArray=function(r){return"[object Array]"===Object.prototype.toString.call(r)},jsBVH=function(r,n){var e=2;isNaN(r)||(e=r);var o=3*e;isNaN(n)||(o=n);var t=Math.floor(o/e),a=function(){var r,n=[];for(r=0;e>r;r++)n.push({a:0,b:0});return n},s=function(r,n){var o;for(isArray(n)||(n=[]),o=0;e>o;o++)n[o]={a:r[o].a,b:r[o].b};return n},i={d:a(),id:"root",nodes:[]},l=(function(){var r={};return function(n){var e=0;return n in r?e=r[n]++:r[n]=0,n+"_"+e}}(),function(r,n){var o,t;if(r.length!=e||n.length!=e)return!1;for(o=0;e>o;o++)t=Math.min(r[o].a,n[o].a),r[o].b=Math.max(r[o].a+r[o].b,n[o].a+n[o].b)-t,r[o].a=t;return r}),d=function(r,n){if(r.length<1)return a();n?s(r[0].d,n):n=s(r[0].d);for(var e=r.length-1;e>0;e--)l(n,r[e].d);return n},u=function(n,o){var t,a=0,s=1;for(t=0;e>t;t++)a+=n[t].b,s*=n[t].b;a/=r;var i=s/Math.pow(a,e);return s*o/i},f=function(r,n){var o,t=!0;for((r.length!=e||n.length!=e)&&(t=!1),o=0;e>o;o++)t=t&&r[o].a<n[o].a+n[o].b&&r[o].a+r[o].b>n[o].a;return t},h=function(r,n){var o,t=!0;for((r.length!=e||n.length!=e)&&(t=!1),o=0;e>o;o++)t=t&&r[o].a+r[o].b<=n[o].a+n[o].b&&r[o].a>=n[o].a;return t},v=function(r){var n=[],e=[],o=[],a=1,i=r.intervals,l=r.object,u=r.root,f=r.comparators;if(!i||!f.overlap_intervals(i,u.d))return o;var h={d:s(i),target:l};e.push(u.nodes.length),n.push(u);do{var v=n.pop(),p=e.pop()-1;if("target"in h)for(;p>=0;){var c=v.nodes[p];if(f.overlap_intervals(h.d,c.d)){if(h.target&&"leaf"in c&&c.leaf===h.target||!h.target&&("leaf"in c||f.contains_intervals(c.d,h.d))){"nodes"in c?(o=q({intervals:c.d,return_nodes:!0,return_array:[],root:c,comparators:f}),v.nodes.splice(p,1)):o=v.nodes.splice(p,1),d(v.nodes,v.d),delete h.target,v.nodes.length<t&&(h.nodes=q({intervals:v.d,return_nodes:!0,return_array:[],root:v,comparators:f}));break}"nodes"in c&&(a+=1,e.push(p),n.push(v),v=c,p=c.nodes.length)}p-=1}else if("nodes"in h){v.nodes.splice(p+1,1),v.nodes.length>0&&d(v.nodes,v.d);for(var g=0;g<h.nodes.length;g++)_({node:h.nodes[g],root:v,comparators:f});h.nodes.length=0,0==n.length&&v.nodes.length<=1?(h.nodes=q({intervals:v.d,return_nodes:!0,return_array:h.nodes,root:v,comparators:f}),v.nodes.length=0,n.push(v),e.push(1)):n.length>0&&v.nodes.length<t?(h.nodes=q({intervals:v.d,return_nodes:!0,return_array:h.nodes,root:v,comparators:f}),v.nodes.length=0):delete h.nodes}else d(v.nodes,v.d);a-=1}while(n.length>0);return o},p=function(r){{var n,e=-1,o=[],t=r.intervals,a=r.root;r.comparators}o.push(a);var i=a.nodes;do{-1!=e&&(o.push(i[e]),i=i[e].nodes,e=-1);for(var d=i.length-1;d>=0;d--){var f=i[d];if("leaf"in f){e=-1;break}var h=u(f.d,f.nodes.length+1),v=s(f.d);l(v,t);var p=u(v,f.nodes.length+2);(0>e||Math.abs(p-h)<n)&&(n=Math.abs(p-h),e=d)}}while(-1!=e);return o},c=function(r){for(var n=m(r);r.length>0;)g(r,n[0],n[1]);return n},g=function(r,n,e){for(var o,a,i,d=u(n.d,n.nodes.length+1),f=u(e.d,e.nodes.length+1),h=r.length-1;h>=0;h--){var v=r[h],p=s(n.d);l(p,v.d);var c=Math.abs(u(p,n.nodes.length+2)-d);p=s(e.d),l(p,v.d);var g=Math.abs(u(p,e.nodes.length+2)-f);(!a||!o||Math.abs(g-c)<o)&&(a=h,o=Math.abs(g-c),i=c>g?e:n)}var m=r.splice(a,1)[0];n.nodes.length+r.length+1<=t?(n.nodes.push(m),l(n.d,m.d)):e.nodes.length+r.length+1<=t?(e.nodes.push(m),l(e.d,m.d)):(i.nodes.push(m),l(i.d,m.d))},m=function(r){var n=new Array(e);for(l=0;e>l;l++)n[l]=r.length-1;var o=new Array(e);for(l=0;e>l;l++)o[l]=0;var t,a,i,l,d;for(l=r.length-2;l>=0;l--)for(i=r[l],d=0;e>d;d++)i.d[d].a>r[o[d]].d[d].a?o[d]=l:i.d[d].a+i.d[d].b<r[n[d]].d[d].a+r[n[d]].d[d].b&&(n[d]=l);d=0;var u,f=0;for(l=0;e>l;l++)u=Math.abs(r[n[l]].d[l].a+r[n[l]].d[l].b-r[o[l]].d[l].a),u>f&&(d=l,f=u);return n[d]>o[d]?(t=r.splice(n[d],1)[0],a=r.splice(o[d],1)[0]):(a=r.splice(o[d],1)[0],t=r.splice(n[d],1)[0]),[{d:s(t.d),nodes:[t]},{d:s(a.d),nodes:[a]}]},b=function(r,n){return r.nodes=n.nodes,r.x=n.x,r.y=n.y,r.w=n.w,r.h=n.h,r},_=function(r){var n;"node"in r||(r.node={d:r.intervals,leaf:r.object});var e=r.node,t=r.root,a=r.comparators;if(0==t.nodes.length)return s(e.d,t.d),t.nodes.push(e),void 0;var i=p({intervals:e.d,root:t,comparators:a}),d=e;do{if(n&&"nodes"in n&&0==n.nodes.length){var u=n;n=i.pop();for(var f=0;f<n.nodes.length;f++)if(n.nodes[f]===u||0==n.nodes[f].nodes.length){n.nodes.splice(f,1);break}}else n=i.pop();if("leaf"in d||"nodes"in d||isArray(d)){if(isArray(d)){for(var h=0;h<d.length;h++)l(n.d,d[h].d);n.nodes=n.nodes.concat(d)}else l(n.d,d.d),n.nodes.push(d);if(n.nodes.length<=o)d={d:s(n.d)};else{var v=c(n.nodes);d=v,i.length<1&&(n.nodes.push(v[0]),i.push(n),d=v[1])}}else l(n.d,d.d),d={d:s(n.d)}}while(i.length>0)};this.envelope=function(){return i&&"d"in i?s(i.d):a()};var y=function(r,n){if(!n){if(!(i&&"d"in i))return!1;n=i.d}var o,t,s=[[],[]],l=[],d=[];for(o=0;e>o;o++)s[0].push(n[o].a),s[1].push(n[o].a+n[o].b),t=1/r[o].b,l.push(t),d.push(0>=t?1:0);var u,f,h,v;for(u=(s[d[0]][0]-r[0].a)*l[0],f=(s[1-d[0]][0]-r[0].a)*l[0],o=1;e>o;o++){if(h=(s[d[o]][o]-r[o].a)*l[o],v=(s[1-d[o]][o]-r[o].a)*l[o],u>v||h>f)return!1;h>u&&(u=h),f>v&&(f=v)}if(u>=1/0||-1/0>=f)return!1;if(0>u&&0>f)return!1;0>u&&(u=0);var p=a();for(o=0;e>o;o++)p[o].a=r[o].a+r[o].b*u,p[o].b=r[o].a+r[o].b*f;return p};this.intersect_ray=y;var w=function(r){{var n=[],e=r.ray,o=r.return_nodes,t=r.return_array,a=r.root;r.comparators}if(y(e,a.d)===!1)return t;n.push(a.nodes);do for(var s=n.pop(),i=s.length-1;i>=0;i--){var l=s[i],d=y(e,l.d);if(d!==!1)if("nodes"in l)n.push(l.nodes);else if("leaf"in l){var u=(d[0].a-e[0].a)/e[0].b;o?t.push({intersect:u,object:l}):t.push({intersect:u,object:l.leaf})}}while(n.length>0);return t},W=function(r){var n=[],e=r.intervals,o=r.root,t=r.comparators,a=r.yield.leaf,s=r.yield.node;if(t.overlap_intervals(e,o.d)){n.push(o.nodes);do for(var i=n.pop(),l=i.length-1;l>=0;l--){var d=i[l];t.overlap_intervals(e,d.d)&&("nodes"in d?(s(d),n.push(d.nodes)):"leaf"in d&&a(d))}while(n.length>0)}},q=function(r){var n=[],e=r.intervals,o=r.return_nodes,t=r.return_array,a=r.root,s=r.comparators;if(!s.overlap_intervals(e,a.d))return t;n.push(a.nodes);do for(var i=n.pop(),l=i.length-1;l>=0;l--){var d=i[l];s.overlap_intervals(e,d.d)&&("nodes"in d?n.push(d.nodes):"leaf"in d&&(o?t.push(d):t.push(d.leaf)))}while(n.length>0);return t};this.get_tree=function(){return i},this.set_tree=function(r,n){return n||(n=i),b(n,r)},this.dimensions=function(){return e},this.intersect=function(r){if(arguments.length<1)throw"Wrong number of arguments. intersect() requires an options object.";if("return_nodes"in r||(r.return_nodes=!1),"return_array"in r||(r.return_array=[]),!("ray"in r))throw"Wrong number of arguments. intersect() requires a ray.";return r.root=i,w(r)},this.yield_to=function(r){if(arguments.length<1)throw"Wrong number of arguments. yield_to() requires an options object.";if("return_nodes"in r||(r.return_nodes=!1),"return_array"in r||(r.return_array=[]),!("comparators"in r)){if(!("intervals"in r))throw"Wrong number of options. yield_to() requires at least a set of intervals of "+e+"-dimensions.";if(r.intervals.length!=e)throw"Wrong number of dimensions in input volume. The tree has a rank of "+e+"-dimensions.";r.comparators={}}if(!("overlap_intervals"in r.comparators)){if(!("intervals"in r))throw"Wrong number of options. yield_to() requires at least a set of intervals of "+e+"-dimensions.";if(r.intervals.length!=e)throw"Wrong number of dimensions in input volume. The tree has a rank of "+e+"-dimensions.";r.comparators.overlap_intervals=f}return"yield"in r||(r.yield={}),"leaf"in r.yield||(r.yield.leaf=function(){}),"node"in r.yield||(r.yield.node=function(){}),r.root=i,W(r)},this.search=function(r){if(arguments.length<1)throw"Wrong number of arguments. search() requires an options object.";if(r.intervals.length!=e)throw"Wrong number of dimensions in input volume. The tree has a rank of "+e+"-dimensions.";if("return_nodes"in r||(r.return_nodes=!1),"return_array"in r||(r.return_array=[]),!("comparators"in r)){if(!("intervals"in r))throw"Wrong number of options. search() requires at least a set of intervals of "+e+"-dimensions.";r.comparators={}}if(!("overlap_intervals"in r.comparators)){if(!("intervals"in r))throw"Wrong number of options. search() requires at least a set of intervals of "+e+"-dimensions.";r.comparators.overlap_intervals=f}if(!("contains_intervals"in r.comparators)){if(!("intervals"in r))throw"Wrong number of options. search() requires at least a set of intervals of "+e+"-dimensions.";r.comparators.contains_intervals=h}return r.root=i,q.apply(this,[r])},this.insert=function(r){if(arguments.length<1)throw"Wrong number of arguments. insert() requires an options object.";if(r.intervals.length!=e)throw"Wrong number of dimensions in input volume. The tree has a rank of "+e+"-dimensions.";if(!("object"in r))throw"Wrong number of options. insert() requires an object to insert.";if(!("comparators"in r)){if(!("intervals"in r))throw"Wrong number of options. insert() requires at least a set of intervals of "+e+"-dimensions.";r.comparators={}}if(!("overlap_intervals"in r.comparators)){if(!("intervals"in r))throw"Wrong number of options. insert() requires at least a set of intervals of "+e+"-dimensions.";r.comparators.overlap_intervals=f}if(!("contains_intervals"in r.comparators)){if(!("intervals"in r))throw"Wrong number of options. insert() requires at least a set of intervals of "+e+"-dimensions.";r.comparators.contains_intervals=h}return r.root=i,_(r)},this.remove=function(r){if(arguments.length<1)throw"Wrong number of arguments. remove() requires an options object.";if(r.intervals.length!=e)throw"Wrong number of dimensions in input volume. The tree has a rank of "+e+"-dimensions.";if("object"in r||(r.object=!1),!("comparators"in r)){if(!("intervals"in r))throw"Wrong number of options. remove() requires at least a set of intervals of "+e+"-dimensions.";r.comparators={}}if(!("overlap_intervals"in r.comparators)){if(!("intervals"in r))throw"Wrong number of options. remove() requires at least a set of intervals of "+e+"-dimensions.";r.comparators.overlap_intervals=f}if(!("contains_intervals"in r.comparators)){if(!("intervals"in r))throw"Wrong number of options. remove() requires at least a set of intervals of "+e+"-dimensions.";r.comparators.contains_intervals=h}if(r.root=i,r.object===!1){var n=0,o=[];do n=o.length,o=o.concat(v.apply(this,[r]));while(n!=o.length);return o}return v.apply(this,[r])},this.toJSON=function(){return i?JSON.stringify(i):void 0},this.makeTree=function(r){r&&(i=r)},this.fromJSON=function(r){var n=JSON.parse(r);n&&(i=n)}};