(function(){var t,e,i,s={}.hasOwnProperty,r=function(t,e){function i(){this.constructor=t}for(var r in e)s.call(e,r)&&(t[r]=e[r]);return i.prototype=e.prototype,t.prototype=new i,t.__super__=e.prototype,t};i=Math.sqrt,e=Math.floor,t=Math.abs,THREE.Vector3Buffer=function(t){function e(t){var e,i,s;for(this.length=t,this.bufStorage=new ArrayBuffer(3*this.length*4),this.buf=new Float32Array(this.bufStorage,0,3*this.length),e=i=0,s=this.length;s>i;e=i+=1)this[e]=new Float32Array(this.bufStorage,3*e*4,3)}return r(e,t),e.prototype.getBuffer=function(){return this.buf},e}(Array),window.TerrainWorker={ready:!1,N:624,FF:4294967295,Seed:48932432,varianceTree:[],getDataArrays:function(t){var e;return this.maxVariance=t.variance,this.width=this.height=t.segments,e=Math.abs(t.bounds.max.x-t.bounds.min.x),this.squareUnits=e/t.segments,this.x=t.bounds.min.x,this.y=t.bounds.min.y,this.getVertices(t),this.getIndices(t),t},getIndices:function(t){var e;return e=this.buildTree(this.width,this.height,t),this.createIndexBuffer(t,e),t},createIndexBuffer:function(t,e){var i,s,r,n,h,a,u,c,l,o;for(r=new Uint16Array(6*this.indexCount),c=(t.segments-1)*this.squareUnits,i=(t.segments-1)*this.squareUnits,n=0,s=l=0,o=e.length;o>l;s=l+=1)null==e[s].lc&&(h=e[s].v1,a=e[s].v2,u=e[s].v3,r[n]=h,r[n+1]=a,r[n+2]=u,n+=3);return t.indices=r},getVertices:function(t){var e,i,s,r,n,h,a,u,c,l,o,b,v,f,d;for(u=t.bounds.min.x,c=t.bounds.min.y,a=e=t.segments,v=t.bounds.max.x-t.bounds.min.x,l=t.bounds.max.y-t.bounds.min.y,n=Math.abs(v/t.segments),h=Math.abs(l/t.segments),r=0,i=o=0;a>o;i=o+=1)for(f=u+i*n,s=b=0;e>b;s=b+=1)d=c+s*h,t.vertices.buf[r]=i*n,t.vertices.buf[r+1]=1200*this.getNoiseValue(f,d),t.vertices.buf[r+2]=s*h,r+=3;return t},getRegion:function(t){var e,i,s,r,n,h,a,u,c,l,o,b,v,f,d,g,p;for(this.initRandom(parseInt(t.seed)),this.initMap(),b=t.x,v=t.y,u=t.x,c=t.y,o=t.width,i=t.height,h=t.octaves,l=t.scale,a=t.container,n=0,s=f=0;o>f;s=f+=1)for(g=b+s,r=d=0;i>d;r=d+=1)p=v+r,a[n]=this.getNoiseValue(g,p,0,h,l),n++;return e={x:u,y:c},t},getNoiseValue:function(t,e,i,s,r){return null==i&&(i=0),null==s&&(s=8),null==r&&(r=1),this.noiseGenerator.get(t,e)},newTri:function(t,e,i){return{v1:t,v2:e,v3:i,ln:null,rn:null,bn:null,lc:null,rc:null}},getVariance:function(t,e,i,s){var r,n,h,a,u;return Math.abs(s.vertices[i][0]-s.vertices[t][0])>this.squareUnits||Math.abs(s.vertices[i][2]-s.vertices[t][2])>this.squareUnits?(n=Math.round((s.vertices[i][0]/this.squareUnits-s.vertices[t][0]/this.squareUnits)/2+s.vertices[t][0]/this.squareUnits),h=Math.round((s.vertices[i][2]/this.squareUnits-s.vertices[t][2]/this.squareUnits)/2+s.vertices[t][2]/this.squareUnits),u=Math.round(n*this.width+h),r=s.vertices[u][1],a=Math.abs(r-(s.vertices[t][1]+s.vertices[i][1])/2),a=Math.max(a,this.getVariance(e,u,t,s)),a=Math.max(a,this.getVariance(i,u,e,s))):a=0,a},buildTree:function(t,e,i){return this.tree=[],this.indexCount=0,this.tree.push(this.newTri(0,t-1,t+t*(e-1)-1)),this.tree.push(this.newTri(t-1+t*(e-1),t*(e-1),0)),this.tree[0].bn=1,this.tree[1].bn=0,this.buildFace(0,i),this.buildFace(1,i),this.tree},buildFace:function(t,e){var i,s,r;null!=this.tree[t].lc?(this.buildFace(this.tree[t].lc,e),this.buildFace(this.tree[t].rc,e)):(i=this.tree[t].v1,s=this.tree[t].v2,r=this.tree[t].v3,this.getVariance(i,s,r,e)>this.maxVariance?(this.splitFace(t,e),this.buildFace(this.tree[t].lc,e),this.buildFace(this.tree[t].rc,e)):this.indexCount++)},splitFace:function(t,e){null!=this.tree[t].bn?(this.tree[this.tree[t].bn].bn!==t&&this.splitFace(this.tree[t].bn,e),this.splitFace2(t,e),this.splitFace2(this.tree[t].bn,e),this.tree[this.tree[t].lc].rn=this.tree[this.tree[t].bn].rc,this.tree[this.tree[t].rc].ln=this.tree[this.tree[t].bn].lc,this.tree[this.tree[this.tree[t].bn].lc].rn=this.tree[t].rc,this.tree[this.tree[this.tree[t].bn].rc].ln=this.tree[t].lc):this.splitFace2(t,e)},getApexIndex:function(){},splitFace2:function(t,e){var i,s,r,n,h,a;r=this.tree[t].v1,n=this.tree[t].v2,h=this.tree[t].v3,i=(e.vertices[h][0]/this.squareUnits-e.vertices[r][0]/this.squareUnits)/2+e.vertices[r][0]/this.squareUnits,s=(e.vertices[h][2]/this.squareUnits-e.vertices[r][2]/this.squareUnits)/2+e.vertices[r][2]/this.squareUnits,a=Math.round(i*this.width+s),this.tree.push(this.newTri(n,a,r)),this.tree[t].lc=this.tree.length-1,this.tree.push(this.newTri(h,a,n)),this.tree[t].rc=this.tree.length-1,this.tree[this.tree[t].lc].ln=this.tree[t].rc,this.tree[this.tree[t].rc].rn=this.tree[t].lc,this.tree[this.tree[t].lc].bn=this.tree[t].ln,null!=this.tree[t].ln&&(this.tree[this.tree[t].ln].bn===t?this.tree[this.tree[t].ln].bn=this.tree[t].lc:this.tree[this.tree[t].ln].ln===t?this.tree[this.tree[t].ln].ln=this.tree[t].lc:this.tree[this.tree[t].ln].rn=this.tree[t].lc),this.tree[this.tree[t].rc].bn=this.tree[t].rn,null!=this.tree[t].rn&&(this.tree[this.tree[t].rn].bn===t?this.tree[this.tree[t].rn].bn=this.tree[t].rc:this.tree[this.tree[t].rn].rn===t?this.tree[this.tree[t].rn].rn=this.tree[t].rc:this.tree[this.tree[t].rn].ln=this.tree[t].rc)}}}).call(this);